{"ast":null,"code":"import _asyncToGenerator from \"@babel/runtime/helpers/asyncToGenerator\";\nimport _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nimport React, { useState } from 'react';\nimport View from \"react-native-web/dist/exports/View\";\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport { TextInput, Button, Text, SegmentedButtons, Snackbar } from 'react-native-paper';\nimport api from \"../services/api\";\nimport { jsx as _jsx, jsxs as _jsxs } from \"react/jsx-runtime\";\nexport default function RegisterScreen(_ref) {\n  var navigation = _ref.navigation;\n  var _useState = useState(''),\n    _useState2 = _slicedToArray(_useState, 2),\n    name = _useState2[0],\n    setName = _useState2[1];\n  var _useState3 = useState(''),\n    _useState4 = _slicedToArray(_useState3, 2),\n    email = _useState4[0],\n    setEmail = _useState4[1];\n  var _useState5 = useState(''),\n    _useState6 = _slicedToArray(_useState5, 2),\n    password = _useState6[0],\n    setPassword = _useState6[1];\n  var _useState7 = useState('parent'),\n    _useState8 = _slicedToArray(_useState7, 2),\n    type = _useState8[0],\n    setType = _useState8[1];\n  var _useState9 = useState(false),\n    _useState10 = _slicedToArray(_useState9, 2),\n    loading = _useState10[0],\n    setLoading = _useState10[1];\n  var _useState11 = useState(''),\n    _useState12 = _slicedToArray(_useState11, 2),\n    error = _useState12[0],\n    setError = _useState12[1];\n  var _useState13 = useState(false),\n    _useState14 = _slicedToArray(_useState13, 2),\n    visible = _useState14[0],\n    setVisible = _useState14[1];\n  var handleRegister = function () {\n    var _ref2 = _asyncToGenerator(function* () {\n      try {\n        setLoading(true);\n        setError('');\n        if (!name.trim() || !email.trim() || !password.trim()) {\n          setError('Por favor, preencha todos os campos');\n          setVisible(true);\n          return;\n        }\n        console.log('Enviando dados de registro:', {\n          name: name,\n          email: email,\n          type: type\n        });\n        yield api.post('/auth/register', {\n          name: name.trim(),\n          email: email.trim(),\n          password: password.trim(),\n          type: type\n        });\n        console.log('Registro realizado com sucesso');\n        navigation.navigate('Login');\n      } catch (error) {\n        var _error$response, _error$response$data;\n        console.error('Erro no registro:', error);\n        setError(((_error$response = error.response) == null ? void 0 : (_error$response$data = _error$response.data) == null ? void 0 : _error$response$data.message) || 'Erro ao criar conta');\n        setVisible(true);\n      } finally {\n        setLoading(false);\n      }\n    });\n    return function handleRegister() {\n      return _ref2.apply(this, arguments);\n    };\n  }();\n  return _jsxs(View, {\n    style: styles.container,\n    children: [_jsx(Text, {\n      style: styles.title,\n      children: \"Criar Conta\"\n    }), _jsx(SegmentedButtons, {\n      value: type,\n      onValueChange: setType,\n      buttons: [{\n        value: 'parent',\n        label: 'Responsável'\n      }, {\n        value: 'child',\n        label: 'Criança'\n      }],\n      style: styles.segmentedButton\n    }), _jsx(TextInput, {\n      label: \"Nome\",\n      value: name,\n      onChangeText: setName,\n      mode: \"outlined\",\n      style: styles.input,\n      disabled: loading\n    }), _jsx(TextInput, {\n      label: \"Email\",\n      value: email,\n      onChangeText: setEmail,\n      mode: \"outlined\",\n      style: styles.input,\n      keyboardType: \"email-address\",\n      autoCapitalize: \"none\",\n      disabled: loading\n    }), _jsx(TextInput, {\n      label: \"Senha\",\n      value: password,\n      onChangeText: setPassword,\n      secureTextEntry: true,\n      mode: \"outlined\",\n      style: styles.input,\n      disabled: loading\n    }), _jsx(Button, {\n      mode: \"contained\",\n      onPress: handleRegister,\n      style: styles.button,\n      loading: loading,\n      disabled: loading,\n      children: \"Criar Conta\"\n    }), _jsx(Button, {\n      mode: \"text\",\n      onPress: function onPress() {\n        return navigation.goBack();\n      },\n      style: styles.button,\n      disabled: loading,\n      children: \"Voltar para Login\"\n    }), _jsx(Snackbar, {\n      visible: visible,\n      onDismiss: function onDismiss() {\n        return setVisible(false);\n      },\n      duration: 3000,\n      action: {\n        label: 'OK',\n        onPress: function onPress() {\n          return setVisible(false);\n        }\n      },\n      children: error\n    })]\n  });\n}\nvar styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    padding: 20,\n    backgroundColor: '#fff'\n  },\n  title: {\n    fontSize: 24,\n    fontWeight: 'bold',\n    textAlign: 'center',\n    marginBottom: 30\n  },\n  input: {\n    marginBottom: 10\n  },\n  button: {\n    marginTop: 10\n  },\n  segmentedButton: {\n    marginBottom: 20\n  }\n});","map":{"version":3,"names":["React","useState","View","StyleSheet","TextInput","Button","Text","SegmentedButtons","Snackbar","api","jsx","_jsx","jsxs","_jsxs","RegisterScreen","_ref","navigation","_useState","_useState2","_slicedToArray","name","setName","_useState3","_useState4","email","setEmail","_useState5","_useState6","password","setPassword","_useState7","_useState8","type","setType","_useState9","_useState10","loading","setLoading","_useState11","_useState12","error","setError","_useState13","_useState14","visible","setVisible","handleRegister","_ref2","_asyncToGenerator","trim","console","log","post","navigate","_error$response","_error$response$data","response","data","message","apply","arguments","style","styles","container","children","title","value","onValueChange","buttons","label","segmentedButton","onChangeText","mode","input","disabled","keyboardType","autoCapitalize","secureTextEntry","onPress","button","goBack","onDismiss","duration","action","create","flex","padding","backgroundColor","fontSize","fontWeight","textAlign","marginBottom","marginTop"],"sources":["/Users/cassioreistrindade/kbc2/frontend/src/screens/RegisterScreen.tsx"],"sourcesContent":["// frontend/src/screens/RegisterScreen.tsx\nimport React, { useState } from 'react';\nimport { View, StyleSheet } from 'react-native';\nimport { TextInput, Button, Text, SegmentedButtons, Snackbar } from 'react-native-paper';\nimport api from '../services/api';\n\nexport default function RegisterScreen({ navigation }) {\n  const [name, setName] = useState('');\n  const [email, setEmail] = useState('');\n  const [password, setPassword] = useState('');\n  const [type, setType] = useState('parent');\n  const [loading, setLoading] = useState(false);\n  const [error, setError] = useState('');\n  const [visible, setVisible] = useState(false);\n\n  const handleRegister = async () => {\n    try {\n      setLoading(true);\n      setError('');\n\n      if (!name.trim() || !email.trim() || !password.trim()) {\n        setError('Por favor, preencha todos os campos');\n        setVisible(true);\n        return;\n      }\n\n      console.log('Enviando dados de registro:', { name, email, type });\n      \n      await api.post('/auth/register', {\n        name: name.trim(),\n        email: email.trim(),\n        password: password.trim(),\n        type,\n      });\n\n      console.log('Registro realizado com sucesso');\n      navigation.navigate('Login');\n    } catch (error: any) {\n      console.error('Erro no registro:', error);\n      setError(error.response?.data?.message || 'Erro ao criar conta');\n      setVisible(true);\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  return (\n    <View style={styles.container}>\n      <Text style={styles.title}>Criar Conta</Text>\n\n      <SegmentedButtons\n        value={type}\n        onValueChange={setType}\n        buttons={[\n          { value: 'parent', label: 'Responsável' },\n          { value: 'child', label: 'Criança' },\n        ]}\n        style={styles.segmentedButton}\n      />\n      \n      <TextInput\n        label=\"Nome\"\n        value={name}\n        onChangeText={setName}\n        mode=\"outlined\"\n        style={styles.input}\n        disabled={loading}\n      />\n      \n      <TextInput\n        label=\"Email\"\n        value={email}\n        onChangeText={setEmail}\n        mode=\"outlined\"\n        style={styles.input}\n        keyboardType=\"email-address\"\n        autoCapitalize=\"none\"\n        disabled={loading}\n      />\n      \n      <TextInput\n        label=\"Senha\"\n        value={password}\n        onChangeText={setPassword}\n        secureTextEntry\n        mode=\"outlined\"\n        style={styles.input}\n        disabled={loading}\n      />\n      \n      <Button \n        mode=\"contained\" \n        onPress={handleRegister} \n        style={styles.button}\n        loading={loading}\n        disabled={loading}\n      >\n        Criar Conta\n      </Button>\n      \n      <Button\n        mode=\"text\"\n        onPress={() => navigation.goBack()}\n        style={styles.button}\n        disabled={loading}\n      >\n        Voltar para Login\n      </Button>\n\n      <Snackbar\n        visible={visible}\n        onDismiss={() => setVisible(false)}\n        duration={3000}\n        action={{\n          label: 'OK',\n          onPress: () => setVisible(false),\n        }}\n      >\n        {error}\n      </Snackbar>\n    </View>\n  );\n}\n\nconst styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    padding: 20,\n    backgroundColor: '#fff',\n  },\n  title: {\n    fontSize: 24,\n    fontWeight: 'bold',\n    textAlign: 'center',\n    marginBottom: 30,\n  },\n  input: {\n    marginBottom: 10,\n  },\n  button: {\n    marginTop: 10,\n  },\n  segmentedButton: {\n    marginBottom: 20,\n  },\n});"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}