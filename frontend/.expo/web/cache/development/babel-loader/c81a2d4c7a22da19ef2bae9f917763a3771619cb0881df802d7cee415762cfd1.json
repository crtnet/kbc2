{"ast":null,"code":"import React, { useRef } from 'react';\nimport View from \"react-native-web/dist/exports/View\";\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport Dimensions from \"react-native-web/dist/exports/Dimensions\";\nimport WebView from 'react-native-webview';\nimport { API_URL } from '@env';\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nexport var PDFViewer = function PDFViewer(_ref) {\n  var pdfUrl = _ref.pdfUrl;\n  var webViewRef = useRef(null);\n  var html = `\n    <!DOCTYPE html>\n    <html>\n    <head>\n      <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n      <script src=\"https://cdnjs.cloudflare.com/ajax/libs/turn.js/4.1.0/turn.min.js\"></script>\n      <style>\n        body, html {\n          margin: 0;\n          padding: 0;\n          width: 100%;\n          height: 100%;\n          overflow: hidden;\n        }\n        #flipbook {\n          width: 100%;\n          height: 100%;\n        }\n        .page {\n          background-color: white;\n        }\n        .page-wrapper {\n          -webkit-perspective: 2000px;\n          perspective: 2000px;\n        }\n      </style>\n    </head>\n    <body>\n      <div id=\"flipbook\"></div>\n      <script>\n        const pdfUrl = '${API_URL}${pdfUrl}';\n        \n        // Carregar o PDF usando PDF.js\n        pdfjsLib.getDocument(pdfUrl).promise.then(function(pdf) {\n          const numPages = pdf.numPages;\n          const flipbook = document.getElementById('flipbook');\n          \n          // Criar p치ginas\n          for(let i = 1; i <= numPages; i++) {\n            const page = document.createElement('div');\n            page.className = 'page';\n            flipbook.appendChild(page);\n            \n            // Renderizar p치gina do PDF\n            pdf.getPage(i).then(function(pdfPage) {\n              const canvas = document.createElement('canvas');\n              page.appendChild(canvas);\n              \n              const scale = 1.5;\n              const viewport = pdfPage.getViewport({ scale });\n              \n              canvas.width = viewport.width;\n              canvas.height = viewport.height;\n              \n              const context = canvas.getContext('2d');\n              const renderContext = {\n                canvasContext: context,\n                viewport: viewport\n              };\n              \n              pdfPage.render(renderContext);\n            });\n          }\n          \n          // Inicializar turn.js\n          $(flipbook).turn({\n            width: window.innerWidth,\n            height: window.innerHeight,\n            autoCenter: true,\n            display: 'double',\n            acceleration: true,\n            gradients: true,\n            elevation: 50,\n            when: {\n              turning: function(e, page, view) {\n                const book = $(this);\n                if (book.turn('is')) {\n                  e.preventDefault();\n                }\n              }\n            }\n          });\n          \n          // Ajustar tamanho ao redimensionar\n          window.addEventListener('resize', function() {\n            $(flipbook).turn('size', window.innerWidth, window.innerHeight);\n          });\n        });\n      </script>\n    </body>\n    </html>\n  `;\n  return _jsx(View, {\n    style: styles.container,\n    children: _jsx(WebView, {\n      ref: webViewRef,\n      source: {\n        html: html\n      },\n      style: styles.webview,\n      javaScriptEnabled: true,\n      domStorageEnabled: true,\n      startInLoadingState: true,\n      scalesPageToFit: true,\n      onError: function onError(syntheticEvent) {\n        var nativeEvent = syntheticEvent.nativeEvent;\n        console.warn('WebView error: ', nativeEvent);\n      }\n    })\n  });\n};\nvar styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    width: Dimensions.get('window').width,\n    height: Dimensions.get('window').height\n  },\n  webview: {\n    flex: 1\n  }\n});\nexport default PDFViewer;","map":{"version":3,"names":["React","useRef","View","StyleSheet","Dimensions","WebView","API_URL","jsx","_jsx","PDFViewer","_ref","pdfUrl","webViewRef","html","style","styles","container","children","ref","source","webview","javaScriptEnabled","domStorageEnabled","startInLoadingState","scalesPageToFit","onError","syntheticEvent","nativeEvent","console","warn","create","flex","width","get","height"],"sources":["/Users/cassioreistrindade/kbc2/frontend/src/components/PDFViewer.tsx"],"sourcesContent":["import React, { useEffect, useRef } from 'react';\nimport { View, StyleSheet, Dimensions } from 'react-native';\nimport WebView from 'react-native-webview';\nimport { API_URL } from '@env';\n\ninterface PDFViewerProps {\n  pdfUrl: string;\n}\n\nexport const PDFViewer: React.FC<PDFViewerProps> = ({ pdfUrl }) => {\n  const webViewRef = useRef<WebView>(null);\n\n  // HTML para renderizar o PDF com efeito flip page\n  const html = `\n    <!DOCTYPE html>\n    <html>\n    <head>\n      <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n      <script src=\"https://cdnjs.cloudflare.com/ajax/libs/turn.js/4.1.0/turn.min.js\"></script>\n      <style>\n        body, html {\n          margin: 0;\n          padding: 0;\n          width: 100%;\n          height: 100%;\n          overflow: hidden;\n        }\n        #flipbook {\n          width: 100%;\n          height: 100%;\n        }\n        .page {\n          background-color: white;\n        }\n        .page-wrapper {\n          -webkit-perspective: 2000px;\n          perspective: 2000px;\n        }\n      </style>\n    </head>\n    <body>\n      <div id=\"flipbook\"></div>\n      <script>\n        const pdfUrl = '${API_URL}${pdfUrl}';\n        \n        // Carregar o PDF usando PDF.js\n        pdfjsLib.getDocument(pdfUrl).promise.then(function(pdf) {\n          const numPages = pdf.numPages;\n          const flipbook = document.getElementById('flipbook');\n          \n          // Criar p치ginas\n          for(let i = 1; i <= numPages; i++) {\n            const page = document.createElement('div');\n            page.className = 'page';\n            flipbook.appendChild(page);\n            \n            // Renderizar p치gina do PDF\n            pdf.getPage(i).then(function(pdfPage) {\n              const canvas = document.createElement('canvas');\n              page.appendChild(canvas);\n              \n              const scale = 1.5;\n              const viewport = pdfPage.getViewport({ scale });\n              \n              canvas.width = viewport.width;\n              canvas.height = viewport.height;\n              \n              const context = canvas.getContext('2d');\n              const renderContext = {\n                canvasContext: context,\n                viewport: viewport\n              };\n              \n              pdfPage.render(renderContext);\n            });\n          }\n          \n          // Inicializar turn.js\n          $(flipbook).turn({\n            width: window.innerWidth,\n            height: window.innerHeight,\n            autoCenter: true,\n            display: 'double',\n            acceleration: true,\n            gradients: true,\n            elevation: 50,\n            when: {\n              turning: function(e, page, view) {\n                const book = $(this);\n                if (book.turn('is')) {\n                  e.preventDefault();\n                }\n              }\n            }\n          });\n          \n          // Ajustar tamanho ao redimensionar\n          window.addEventListener('resize', function() {\n            $(flipbook).turn('size', window.innerWidth, window.innerHeight);\n          });\n        });\n      </script>\n    </body>\n    </html>\n  `;\n\n  return (\n    <View style={styles.container}>\n      <WebView\n        ref={webViewRef}\n        source={{ html }}\n        style={styles.webview}\n        javaScriptEnabled={true}\n        domStorageEnabled={true}\n        startInLoadingState={true}\n        scalesPageToFit={true}\n        onError={(syntheticEvent) => {\n          const { nativeEvent } = syntheticEvent;\n          console.warn('WebView error: ', nativeEvent);\n        }}\n      />\n    </View>\n  );\n};\n\nconst styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    width: Dimensions.get('window').width,\n    height: Dimensions.get('window').height,\n  },\n  webview: {\n    flex: 1,\n  },\n});\n\nexport default PDFViewer;"],"mappings":"AAAA,OAAOA,KAAK,IAAeC,MAAM,QAAQ,OAAO;AAAC,OAAAC,IAAA;AAAA,OAAAC,UAAA;AAAA,OAAAC,UAAA;AAEjD,OAAOC,OAAO,MAAM,sBAAsB;AAC1C,SAASC,OAAO,QAAQ,MAAM;AAAC,SAAAC,GAAA,IAAAC,IAAA;AAM/B,OAAO,IAAMC,SAAmC,GAAG,SAAtCA,SAAmCA,CAAAC,IAAA,EAAmB;EAAA,IAAbC,MAAM,GAAAD,IAAA,CAANC,MAAM;EAC1D,IAAMC,UAAU,GAAGX,MAAM,CAAU,IAAI,CAAC;EAGxC,IAAMY,IAAI,GAAG;AACf;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,0BAA0BP,OAAO,GAAGK,MAAM;AAC1C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,GAAG;EAED,OACEH,IAAA,CAACN,IAAI;IAACY,KAAK,EAAEC,MAAM,CAACC,SAAU;IAAAC,QAAA,EAC5BT,IAAA,CAACH,OAAO;MACNa,GAAG,EAAEN,UAAW;MAChBO,MAAM,EAAE;QAAEN,IAAI,EAAJA;MAAK,CAAE;MACjBC,KAAK,EAAEC,MAAM,CAACK,OAAQ;MACtBC,iBAAiB,EAAE,IAAK;MACxBC,iBAAiB,EAAE,IAAK;MACxBC,mBAAmB,EAAE,IAAK;MAC1BC,eAAe,EAAE,IAAK;MACtBC,OAAO,EAAE,SAATA,OAAOA,CAAGC,cAAc,EAAK;QAC3B,IAAQC,WAAW,GAAKD,cAAc,CAA9BC,WAAW;QACnBC,OAAO,CAACC,IAAI,CAAC,iBAAiB,EAAEF,WAAW,CAAC;MAC9C;IAAE,CACH;EAAC,CACE,CAAC;AAEX,CAAC;AAED,IAAMZ,MAAM,GAAGZ,UAAU,CAAC2B,MAAM,CAAC;EAC/Bd,SAAS,EAAE;IACTe,IAAI,EAAE,CAAC;IACPC,KAAK,EAAE5B,UAAU,CAAC6B,GAAG,CAAC,QAAQ,CAAC,CAACD,KAAK;IACrCE,MAAM,EAAE9B,UAAU,CAAC6B,GAAG,CAAC,QAAQ,CAAC,CAACC;EACnC,CAAC;EACDd,OAAO,EAAE;IACPW,IAAI,EAAE;EACR;AACF,CAAC,CAAC;AAEF,eAAetB,SAAS","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}